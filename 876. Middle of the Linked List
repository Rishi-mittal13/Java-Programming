//problem - 876(LEETCODE).
//







/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        int c =  size(head)/2;
        while(c!=0){
            c--;
            head = head.next;
        }
        return head;

    }
    public static int size(ListNode head){
        ListNode temp = head;
        int n = 0;
        while(temp!=null){
            n++;
            temp = temp.next;
        }
        return n;
    }
}





//2nd Approach Best=> by two pointer 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode point1 = head ;
        ListNode point2 = head ;
        while(point2.next!=null){
            point1 =  point1.next;
            point2 = point2.next.next;
            if(point2 == null) return point1;
        }
        return point1;
    }
}
