//problem - 37(leetcode).
//Approach -  by Backtracking 

class Solution {
    public void solveSudoku(char[][] board) {
        SudokuSolver(board , 0 , 0);
    }
    public static boolean SudokuSolver(char[][] board , int r , int c){
        if(c==9){ r++; c=0; }
        if(r == 9) {return true ;}
        if(board[r][c] != '.'){ 
            return SudokuSolver(board , r , c+1) ;
        }
        else{
            for(char val = '1' ; val<='9' ; val++){
                if(isPossible(board , r , c , val )){
                    board[r][c] = val;
                    if(SudokuSolver(board , r , c+1)) return true ;
                    board[r][c] =  '.';
                }
            }
        }
        return false;
    }
    public static boolean isPossible(char[][]  board , int r , int c , char val){
        for(int i = 0 ; i<9  ;i++){
            if(board[r][i]==val) return false;
            if(board[i][c]==val) return false;
        }
        int rs =  3*(r/3) , re = 3*(r/3 +1);
        int cs =  3*(c/3) , ce =  3*(c/3 + 1);
        for(int i = rs ; i<re ; i++){
            for(int j = cs ; j<ce ;j++){
                if(board[i][j]==val) return false;
            }
        }
        return true ;
    }
}
