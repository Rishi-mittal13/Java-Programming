//1_TWO SUM


//1. BASIC APPROACH (BRUTEFORCE).
//TIME- COMPLEXITY :- O(n^2)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        int[] arr = new int[2];
        for(int i = 0 ; i<n-1 ; i++){
            for(int j = i+1; j<n ; j++ ){
                if(nums[i]+nums[j] == target){
                    arr[0] = i ;
                    arr[1] = j;
                    return arr;
                }
    
            }
        }
        return arr;
        
    }
}



//Second Approach -> O(nlogn).  by hashmap .
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] arr =  new int[2];
        HashMap<Integer ,  Integer >  hm = new HashMap<>();
        for(int i = 0 ; i<nums.length ; i++){
            int req = target - nums[i];
            if(hm.containsKey(req)){
                arr[0] = i;
                arr[1] = hm.get(req);
                return arr;
            }
            hm.put(nums[i] ,  i);
        } 
        return null;
    }
}
