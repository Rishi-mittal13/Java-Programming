//problem-79(leetcode).

//by recursion .


class Solution {
    public static boolean Search(char[][] board , int c , int r , String word , int idx ){
        if(idx==word.length()) return true;
        if(c<0 || c>=board.length || r<0 || r>=board[0].length || board[c][r]!=word.charAt(idx)){ return false;}
        int[] a1 = {-1,1,0,0};
        int[] a2 = {0,0,-1,1};
        boolean ans = false;
        board[c][r] = '*';
        for(int i = 0 ; i<a2.length ; i++){
            ans = Search(board , c+a1[i] , r+a2[i], word , idx+1);
            if(ans) return true;
        }
        board[c][r] =  word.charAt(idx);
        return false;
    }
    public boolean exist(char[][] board, String word) {
        for(int i = 0 ; i<board.length ; i++){
            for(int j = 0 ;  j<board[0].length ; j++){
                if(board[i][j]==word.charAt(0)){
                    if(Search(board , i , j , word , 0)) return true;
                }
            }
        }
        return false;
    }
}
