//problem - 216(leetcode).
//Approach by BackTracking .

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> ans =  new ArrayList<>();
        List<Integer> lst =  new ArrayList<>();
        int[] arr = {1,2,3,4,5,6,7,8,9};
        solve(arr,k,n,ans,0,lst);
        return ans;
    }
    public static void solve(int[] arr, int k , int target, List<List<Integer>> ans , int ind , List<Integer> lst){
        if(k==0) {
            if(target==0) ans.add(new ArrayList<>(lst));
            return ;
        }
        for(int i = ind ; i<arr.length ; i++){
            if(arr[i]>target) break;
            lst.add(arr[i]);
            solve(arr, k-1 , target-arr[i] , ans , i+1 ,lst);
            lst.remove(lst.size()-1);
        }
    }
}
