import java.util.ArrayList;
import java.util.HashSet;
//import java.util.Iterator;
//import java.util.List;
import java.util.Scanner;


class JavaArrayListMethod{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        ArrayList<String> arr1= new ArrayList<>();
        HashSet<String> arr2 = new HashSet<>();
        //Object arr3 = new ArrayList<>();  //---> For Method -4.
        arr2.add("a");
        arr2.add("b");
        arr2.add("c");
        for(int i =0 ; i<5; i++){
            arr1.add(sc.next()); 
        }
        
        
        //Method of ArrayList.


        // 1). add() --> to add element in ArrayList.

        // 2). addAll() --> add all element of a collection in arrayList.
        // arr1.addAll(arr2);

        // 3).clear() --> clear all the elements in list.
        //arr1.clear();

        // 4). clone() --> makes a copy of the array list
        //arr3 = arr1.clone();
        //System.out.println("ArrayList: "+arr3);

        // 5). contains() --> check whether a element is present or not in ArrayList.
        // boolean a = arr1.contains("hello");
        // System.out.println(a);

        // 6). get() --> return the element at specified index.
        // String s = arr1.get(1);
        // System.out.println(s);

        // 7). indexOf --> return the index of specified element. return -1 if not found.
        // int a = arr1.indexOf("hell");
        // System.out.println(a);

        // 8). removeAll --> it removes mutiple element in ArrayList.
        // arr1.removeAll(arr2);
        // System.out.println(arr1);

        // 9). remove() --> remove element from ArrayList of specified element.(we use string elemnt and index to remove)
        //arr1.remove("hello");
        //System.out.println(arr1);

        // 10). size() --> returns the size of ArrayList.
        //System.out.println(arr1.size());

        // 11). isEmpty() --> check whether a ArrayList is Empty or not.
        //System.out.println(arr1.isEmpty());

        // 12). subList() --> returns a portion of the arraylist.
        // Object arr4 = new ArrayList<>();
        // arr4= arr1.subList(2,5);
        // System.out.println(arr4);

        // 13). set() --> replace the single element from an arraylist.
        // arr1.set(4,"java");
        // System.out.println(arr1);

        // 14). sort() --> sorts the arraylist according to specified order.
        // arr1.sort(null);// --> natural ordering using null.
        // System.out.println(arr1);

        // 15). toArray --> convert ArrayList in to Array.
        // arr1.toArray();
        // System.out.println(arr1);

        // 16). toString --> convert ArrayList in to String.
        // String s = arr1.toString();
        // System.out.println(s.getClass().getName());
        // System.out.println(s.charAt(0));

        // 17). ensureCapacity() --> to resize the ArrayList .
        // arr1.ensureCapacity(3);
        // Ques: why do we need to resize arraylist using the ensureCapacity() method 
        // if the arraylist can automatically resize itself?
        // ans:- It is because if we use the ensureCapacity() to resize the arraylist,
        //  then the arraylist will be resized at once with the specified capacity. 
        //  Otherwise, the arraylist will be resized every time when an element is added.

        //18). lastIndexOf() --> The Java ArrayList lastIndexOf() 
        // method returns the position of the last occurrence of the specified element.return -1 if not found.
        // System.out.println(arr1.lastIndexOf("hello")); 
        // System.out.println(arr1.lastIndexOf("mittal"));  

        // 19). retainAll() --> The Java ArrayList retainAll() method retains only those elements in the arraylist.
        // that are also present in the specified collection.
        // arr1.retainAll(arr2);
        // System.out.println(arr1);

       // 20). containsAll() --> The Java ArrayList containsAll() 
       // method checks whether the arraylist contains all the elements of the specified collection. 
       // System.out.println(arr1.containsAll(arr2));

       // 21). trimToSize() --> The Java ArrayList trimToSize() method trims (sets) the capacity 
       // of the arraylist equal to the number of elements in the arraylist.
       //    arr1.trimToSize();
       //    System.out.println(arr1.size());

       // 22). removeRange() --> The Java ArrayList removeRange() 
       // method removes elements from the arraylist present in between the specified indices.
       // arr1.removeRange(1,3); --> this is  not working.
       // arr1.subList(1,3).clear(); // --> this is working.
       //arr1.removeAll(arr1.subList(1,3)); // --> this is also working.
       //System.out.println(arr1);

       // 23)*. replaceAll(UnaryOperator<E> operator) --> The Java ArrayList replaceAll() method replaces each elements
       // of the arraylist with the result specified by the parameter.(important)
       // its replace all element of a lambda expression . 
       // arr1.replaceAll(e -> e.toUpperCase());
       // System.out.println(arr1);
       // arr1.replaceAll(e -> e+"a");
       // System.out.println(arr1);

       // 24)*. removeIf() --> The Java ArrayList removeIf() 
       // method removes all elements from the arraylist that satisfy the specified condition.
       // in this method lambda expression is also used.(important)
       // arr1.removeIf(e -> e.startsWith("a"));
       // System.out.println(arr1);

       // 25)*. forEach() --> We discusse later about that.

       // 26)*. iterator() --> The Java ArrayList iterator() method
       // returns an iterator to access each element of the arraylist in a proper sequence.
       // it does not take any parameter. it return an iterator to loop through the ArrayList 
       // element.
       // Iterator<String> itr  = arr1.iterator();
       // while(itr.hasNext()){
       //  System.out.print(itr.next() + ",");
       // }
        sc.close();

    }

}
