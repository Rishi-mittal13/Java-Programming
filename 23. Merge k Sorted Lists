//problem - 23(leetcode).


//Approach -  Divide And Conquer  .  T.C => k*log(n).
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0) return null;
        if(lists.length == 1) return lists[0];
        return merge(lists ,  0 ,  lists.length -1 );
    }
    public static ListNode merge(ListNode[] lists ,  int l , int h){
        if(l>h) return null;
        if(l==h) return lists[l];
        int mid  = (l+h)/2;
        ListNode left = merge(lists , l, mid);
        ListNode right =  merge(lists , mid+1 , h);
        return mergeTwoList(left , right);
    }
    public static ListNode mergeTwoList(ListNode left , ListNode right){
        ListNode ans =  new ListNode(0);
        ListNode temp =  ans ;
        while(left!=null && right!=null){
            if(left.val<=right.val){
                temp.next =  left ;
                left = left.next ;
            }
            else {
                temp.next = right ;
                right =  right.next ;
            }
            temp = temp.next ;
        }
        if(left!=null) temp.next = left ;
        if(right!=null) temp.next =  right ;
        return ans.next ;
    }
}
