//problem -  34(leetcode).

//Approach -  1 ,  basic bruet force , T.C =>  O(n).
class Solution {
    public int[] searchRange(int[] nums, int target) {
       int n =  nums.length;
       int[] ans = {-1, -1};
       for(int i = 0 ; i<n ;i++){
           if(nums[i]==target && ans[0]==-1) ans[0] = i;
           if(nums[n-i-1]==target && ans[1]==-1) ans[1] = n-i-1;
           if(ans[0]!=-1 && ans[1]!=-1) return ans;
       }
       return ans;
    }
}




//Approach - 2: - by binary search :- T.C =   O(logn).

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans = new int[2];
        ans[0] = search(nums , target , true);
        ans[1] = search(nums , target , false);
        return ans ;
    }
    //pos = true :- means first occurence of target.
    //pos =  false :- means last occurence of target.
    public static int search(int[] nums ,int target ,  boolean pos ){
        int s = 0 , e = nums.length-1 , ind = -1;
        while(s<=e){
            int mid = (s+e)/2;
            if(nums[mid]<target) s =  mid+1;
            else if(nums[mid]>target) e = mid - 1;
            else{
                ind =  mid ;
                if(pos) e =  mid -1 ;
                else s =  mid+1;
            }
        }
        return ind ; 
    }
}
