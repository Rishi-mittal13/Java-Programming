//problem-2130(leetcode).


//Basic - Approach => Not So good Approach
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int pairSum(ListNode head) {
        int[] arr = new int[1000001];
        ListNode temp = head ;
        int size = 0 ;
        while(temp!=null){
            arr[size] = temp.val;
            temp = temp.next;
            size++;
        }
        int max = 0 ;
        for(int i = 0 ; i<(size/2) ; i++){
            int v =  arr[i]+arr[size-1-i];
            if(v>max) max = v;
        }
        return max;
    }
}




//by Reverse Approach :- 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int pairSum(ListNode head) {
        ListNode front =  head;
        ListNode prev =  null;
        ListNode current = head ;
        int size = 0 , max = 0;
        while(current!=null){
            ListNode curr =  new ListNode(current.val);
            curr.next = prev;
            prev =  curr;
            current = current.next ;
            size++;
        }
        for(int i = 0 ;i<(size/2) ; i++){
            int v = front.val + prev.val;
            if(v>max) max = v;
            front = front.next ;
            prev =  prev.next;
        }
        return max;
    }
}
