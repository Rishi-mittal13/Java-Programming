//problem-148(leetcode).

//T.C -> O(nlogn).




/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static ListNode mergeList(ListNode h1 , ListNode h2){
        ListNode temp = new ListNode(0);
        ListNode head = temp ;
        while(h1!=null && h2!=null){
            if(h1.val>h2.val){
                temp.next = h2;
                h2 =  h2.next;
            }
            else{
                temp.next =  h1;
                h1 = h1.next;
            }
            temp = temp.next;
        }
        while(h1!=null){
            temp.next = h1;
            h1  = h1.next;
            temp = temp.next;
        }
        while(h2!=null){
            temp.next = h2;
            h2  = h2.next;
            temp = temp.next;
        }
        return head.next;
    }
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null) return head;
        ListNode mi = mid(head);
        ListNode midnext = mi.next;
        mi.next = null;
        ListNode h1 = sortList(head);
        ListNode h2 =  sortList(midnext);
        return mergeList(h1,h2);
    }
    public static ListNode mid(ListNode head){
        ListNode slow = head ;
        ListNode fast = head ;
        while(fast.next!=null && fast.next.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}
