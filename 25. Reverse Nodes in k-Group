//problem -  25(leetcode).
//T.C -> O(n) ,  S.C -> O(1).

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        int n =  len(head) , num = n/k;
        ListNode ans =  new ListNode(0);
        ListNode temp  = ans;
        for(int i = 0 ; i<num ; i++){
            int l = k ;
            ListNode h =  head ;
            while((l-1)>0){
                head =  head.next ;
                l--;
            }
            ListNode t =  head.next ;
            head.next = null;
            head =  t ;
            ans.next =  reverse(h);
            ans = h ;
        }
        if(head!=null) ans.next = head;
        return temp.next ;
    }
    public static ListNode reverse(ListNode head){
        ListNode prev = null , curr = null , next = null;
        while(head!=null){
            curr = head; 
            next =  head.next ;
            head.next = null;
            curr.next =  prev ;
            prev =  curr;
            head =  next ;
        }
        return prev ;
    }
    public static int len(ListNode head){
        int n = 0 ;
        while(head!=null){
            n++;
            head = head.next ;
        }
        return n;
    }
}
