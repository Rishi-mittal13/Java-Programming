//problem-445(leetcode).
//T>C -->  O(n), S.C -> O(n).



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode ls1 = reverse(l1);
        ListNode ls2 =  reverse(l2);
        ListNode temp = new ListNode(0);
        ListNode head = temp;
        int c = 0;
        while(ls1!=null && ls2!=null){
            int n = ls1.val + ls2.val + c;
            if(n>=10){
                n = n-10;
                c = 1;
            }
            else c =0;
            ListNode v =  new ListNode(n);
            temp.next = v;
            temp = temp.next ;
            ls1 =  ls1.next;
            ls2 = ls2.next;
        }
        while(ls1!=null){
            int n = ls1.val+c;
            if(n>=10){
                n = n-10;
                c = 1;
            }
            else c = 0 ;
            ListNode v = new ListNode(n);
            temp.next = v ;
            ls1 =  ls1.next ;
            temp =  temp.next;
        }
        while(ls2!=null){
            int n = ls2.val+c;
            if(n>=10){
                n = n-10;
                c = 1;
            }
            else c = 0 ;
            ListNode v = new ListNode(n);
            temp.next = v ;
            ls2 =  ls2.next ;
            temp = temp.next;
        }
        if(c==1){
            ListNode v = new ListNode(c);
            temp.next = v;
        }
        return reverse(head.next);
    }
    public static ListNode reverse(ListNode node){
        ListNode prev = null;
        ListNode curr = null;
        while(node!=null ){
            curr = node.next;
            node.next = null;
            node.next = prev;
            prev = node;
            node = curr;
        }
        return prev;
    }
}
