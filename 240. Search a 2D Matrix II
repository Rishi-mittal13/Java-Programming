//problem-240(leetcode).


//1st-approach => time-complexity = O(n*m)
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for(int i = 0 ; i<matrix.length ; i++){
            for(int j = 0 ; j<matrix[0].length ; j++){
                if(matrix[i][j]==target) return true;
            }
        }
        return false;
    }
}


//2nd approach => O(n*log(m))
class Solution {
    public static boolean bs(int[] arr , int target){
        int s = 0 ,  e = arr.length-1 , mid = 0 ;
        while(s<=e){
            mid = (s+e)/2;
            if(arr[mid]==target) return true;
            else if(arr[mid]>target) e = mid -1 ;
            else s = mid+1;
        }
        return false;
    }
    public boolean searchMatrix(int[][] matrix, int target) {
        int c = matrix[0].length;
        for(int i = 0 ; i<matrix.length ; i++){
            if(matrix[i][0]<=target && matrix[i][c-1]>=target){
                if(bs(matrix[i] , target)) return true;
            }
        }
        return false;
    }
}
