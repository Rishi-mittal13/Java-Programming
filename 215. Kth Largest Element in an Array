//problem - 215(leetcode). 

//Approach-1 (By sorting) T.C => O(nlogn)
class Solution {
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);//nlog(n)
        return nums[nums.length-k];
    }
}


//Approach-2 (By PriorityQueue) T.C => O(nlogk.
class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int i  = 0; i<k ; i++) pq.offer(nums[i]);
        for(int i  = k ; i < nums.length ; i++){
            if(nums[i]>pq.peek()){
                pq.poll();
                pq.offer(nums[i]);
            }
        }
        return pq.peek();
    }
}


