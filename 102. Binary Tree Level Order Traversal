//problem -  102(leetcode).

//T.C => O(n) ,  n-> n is the number of node .


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> nq = new LinkedList<>();
        List<List<Integer>> ans = new ArrayList<>();
        if(root==null) return ans;
        nq.offer(root);
        while(!nq.isEmpty()){
            int n =  nq.size();
            List<Integer> lst =  new ArrayList<>();
            for(int i =  0 ; i<n ; i++){
                if(nq.peek().left!=null) nq.offer(nq.peek().left);
                if(nq.peek().right!=null) nq.offer(nq.peek().right);
                lst.add(nq.poll().val);
            }
            ans.add(lst);
        }
        return ans;
    }
}
