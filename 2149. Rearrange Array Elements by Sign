//problem-2149(leetcode).

//1st Approach Time-compleity -> O(n).
class Solution {
    public int[] rearrangeArray(int[] nums) {
        int n = nums.length , a1 =0 , a2 = 0;
        int[] arp = new int[n/2];
        int[] arn = new int[n/2];
        for(int i = 0 ; i<n ; i++){
            if(nums[i]>0) arp[a1++] = nums[i];
            else arn[a2++] = nums[i];
        }
        a1 = 0 ; a2 = 0;
        while(a1<n){
            nums[a1] = arp[a2];
            nums[a1+1] = arn[a2];
            a2++;
            a1+=2;
        }
        return nums;
    }
}




//@nd Approach 100% beats Time-complexity :- O(n).
class Solution {
    public int[] rearrangeArray(int[] nums) {
        int n = nums.length , a1 =0 , a2 = 1;
        int[] ans = new int[n];
        for(int i = 0 ; i<n ;i++){
            if(nums[i]>0){
                ans[a1] = nums[i];
                a1+=2;
            }
            else{
                ans[a2] = nums[i];
                a2+=2;
            }
        }
        return ans;
    }
}
