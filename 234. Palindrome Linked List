//problem - 234(leetcode).
//T.C -> O(n) , S.C ->  O(1).


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode temp =  head , temp1 =  null;
        int n =  size(head);
        if(n%2==1) n = n/2 +1;
        else n = n/2;
        for(int i = 0 ; i<n-1 ; i++){
            head = head.next ;
        }
        temp1 =  head.next ;
        ListNode sn =  reverse(temp1);
        while(temp!=null && sn!=null){
            if(temp.val!=sn.val) return false;
            temp =  temp.next ;
            sn = sn.next ;
        }
        return true ;
    }
    public static ListNode reverse(ListNode node){
        ListNode prev =  null , curr =  null , next =  null;
        while(node!=null){
            next =  node.next ;
            node.next = null;
            node.next = prev  ;
            prev =  node ;
            node =  next ;
        }
        return prev;
    }
    public static int size(ListNode head ){
        int n = 0 ;
        while(head!=null){
            n++;
            head=head.next;
        }
        return n ;
    }
}
