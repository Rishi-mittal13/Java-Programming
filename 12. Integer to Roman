//problem-12(leetcode)

//By HashMap :- O(n).
class Solution {
    public String intToRoman(int num) {
        HashMap<Integer , String > hm = new HashMap<>();
        hm.put(1,"I"); hm.put(5,"V"); hm.put(10,"X"); hm.put(50,"L");
        hm.put(100,"C"); hm.put(500,"D"); hm.put(1000,"M"); hm.put(4,"IV");
        hm.put(9,"IX"); hm.put(40,"XL"); hm.put(90,"XC"); hm.put(400,"CD");
        hm.put(900 , "CM");
        int[]  arr =  {1,4,5,9,10,40,50,90,100,400,500,900,1000};
        StringBuffer str = new StringBuffer();
        while(num>0){
            for(int i = 12 ; i>=0 ; i--) {
                if((num-arr[i])>=0){
                    str.append(hm.get(arr[i]));
                    num =  num - arr[i];
                    break;
                }
            }
        }
        return str.toString();
    }
}


//The BadAss Solution . 
class Solution {
    public String intToRoman(int num) {
        String M[] = {"", "M", "MM", "MMM"};
        String C[] = {"", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"};
        String X[] = {"", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"};
        String I[] = {"", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"};
        return M[num/1000] + C[(num%1000)/100] + X[(num%100)/10] + I[num%10];
    }
}
