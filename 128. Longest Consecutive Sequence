//problem -  128(leetcode).


//Approach  - 1 (By sorting). T.C =  O(nlogn)
class Solution {
    public int longestConsecutive(int[] nums) {
        Arrays.sort(nums);
        int max  = 0  , count =  0 , next = 0;
        for(int i = 0 ; i<nums.length ; i++){
            if(i==0 ) count = 1;
            else if(nums[i]==(next)) count++;
            else if(nums[i]==(next-1)) count = count;
            else count =  1;
            next =  nums[i]+1;
            if(count>max) max =  count ;
        }
        return max;
    }
}

//Approach -2 by (HashSet). T.C => O(n)
class Solution {
    public int longestConsecutive(int[] nums) {
        HashSet<Integer> hs =  new HashSet<>();
        for(int i :  nums) hs.add(i);
        int count = 0  , max  = 0 , n = nums.length;
        for(int i = 0 ; i<n ; i++ ){
            if(!hs.contains(nums[i]-1)){
                count =  1 ;
                int num =  nums[i];
                while(hs.contains(++num)){
                    count++ ;  
                    hs.remove(num);
                }
                num = nums[i];
                while(hs.contains(--num)){
                    count++;
                    hs.remove(num);
                }
                if(count>max) max =  count ;
            }
        }
        return max;
    }
}
