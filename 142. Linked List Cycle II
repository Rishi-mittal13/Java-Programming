//problem-142(leetcode).


//1st :- Basic Approach using hashSet with O(n) memory .

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        HashSet<ListNode> hm = new HashSet<>();
        ListNode temp = head ;
        while(temp!=null ){
            if(!hm.contains(temp)) hm.add(temp);
            else return temp;
            temp = temp.next;
        }
        return null;
    }
}




//2nd :- Using Floyd Cycle with constant memory and better time - complexity to hashmap approach 
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode p1 =  head ;
        ListNode p2 = head ;
        while(p2!=null  && p2.next!=null){
            p1 = p1.next;
            p2 = p2.next.next;
            if(p1==p2){
                p1 =  head ;
                while(p1!=p2){
                    p1 = p1.next ;
                    p2 =  p2.next;
                }
                return p1;
            }
        }
        return null;
    }
}
