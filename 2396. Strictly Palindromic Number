//problem-2396 (leetcode).


//O(n^2) Approach .
class Solution {
    public boolean isStrictlyPalindromic(int n) {
        for(int i =  2 ; i<=(n-2);  i++) if(!isPalindrome(toString(n,i))) return false;
        return true;
    }
    public static String toString(int n , int b){
        StringBuffer  str   =  new StringBuffer();
        while(n>0){
            int r =  n%b;
            str.append(r);
            n/=b;
        }
        str.reverse();
        return str.toString();
    }
    public static boolean isPalindrome(String s){
        int n = s.length();
        for(int i = 0 ; i<(n/2) ; i++){
            if(s.charAt(i) != s.charAt(n-1-i)) return false;
        }
        return true;
    }
}


//brainteasing method 
class Solution {
    public boolean isStrictlyPalindromic(int n) {
        return false;
    }
}
