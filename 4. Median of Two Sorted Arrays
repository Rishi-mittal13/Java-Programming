//problem-4(leetcode).
//TIME-COMPLEXITY --> O(N+M).
//SPACE-COMPLEXITY --> O(N+M).
//1ST APPROACH .
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length,m = nums2.length;
        int[] arr = new int[n+m];
        int i =0,j=0,k=0;
        while(i<n && j<m){
            if(nums1[i]<=nums2[j]){
                arr[k] = nums1[i];
                i++;
            }else{
                arr[k] = nums2[j];
                j++;
            }
            k++;
        }
        while(i<n){
            arr[k] = nums1[i];
            i++;
            k++;
        }
        while(j<m){
            arr[k] = nums2[j];
            j++;
            k++;
        }
        double sum = 0;
        if((m+n)%2==0) sum = (double)(arr[(m+n)/2] + arr[((m+n)/2)-1])/2;
        else sum = arr[(m+n)/2];
        return sum; 
    }
}









//2ND APPROACH.
//TIME-COMPLEXITY - O(N+M).
//SPACE-COMPLEXITY - O(M+N).
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length,m = nums2.length;
        int mid = (m+n)/2 , a1 = 0 , a2 = 0;
        int i =0,j=0,k=0;
        while(i<n && j<m){
            if(nums1[i]<=nums2[j]){
                if(k==(mid-1)) a1 = nums1[i];
                if(k==mid) a2 = nums1[i];
                i++;
            }else{
                if(k==(mid-1)) a1 = nums2[j];
                if(k==mid) a2 = nums2[j];
                j++;
            }
            k++;
        }
        while(i<n){
            if(k==(mid-1)) a1 = nums1[i];
            if(k==mid) a2 = nums1[i];
            i++;
            k++;
        }
        while(j<m){
            if(k==(mid-1)) a1 = nums2[j];
            if(k==mid) a2 = nums2[j];
            j++;
            k++;
        }
        double sum = 0;
        if((m+n)%2==0) sum = (double)(a1+a2)/2;
        else sum = a2;
        return sum; 
    }
}
