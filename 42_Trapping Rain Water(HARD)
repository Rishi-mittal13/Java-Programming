//problem-42(LEETCODE).
//TIME-COMPLEXITY - O(N).

//EXPLANATION OF APPROACH :- we have to trapped water in heights . so, in this approach 
-->First, we find the all left maximum values for particular instance.
-->Second, we find the all right maximum values for particular instance.
-->Third, now find min of  left maximum and right maximum for particular instance .
-->Fourth, now substract a particular instance height from that min .
-->Fifth, take sum of all differences and return .
Note :-  for more understanding draw it's diagram and do dry-run.




class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = height[0];
        right[n-1] = height[n-1];
        for(int i = 1 ; i<n ; i++){
            left[i] = Math.max(left[i-1],height[i]);
        }
        for(int i = n-2 ; i>=0 ; i-- ){
            right[i] = Math.max(right[i+1],height[i]);
        }
        int trap = 0;
        int m = 0;
        for(int i =0 ; i<n ; i++){
            m =  Math.min(left[i],right[i]);
            trap+=(m-height[i]);
        }
        return trap;
    }
}
