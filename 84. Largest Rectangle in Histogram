//problem-84(leetcode).

//time-complexity => O(n).


class Solution {
    public static int[] nextSmaller(int[] heights , int n){
        int[] ans = new int[n];
        Stack<Integer> st = new Stack<>();
        for(int i = 0 ; i<n ; i++){
            while(!st.isEmpty() && (heights[i]<heights[st.peek()])){
                ans[st.pop()] = i;
            }
            st.push(i);
        }
        while(!st.isEmpty()) ans[st.pop()] = n ;
        return ans;
    }
    public static int[] PreviousSmaller(int[] heights , int n){
        int[] ans = new int[n];
        Stack<Integer> st = new Stack<>();
        for(int i = n-1 ; i>=0 ; i--){
            while(!st.isEmpty() && (heights[i]<heights[st.peek()])){
                ans[st.pop()] = i;
            }
            st.push(i);
        }
        while(!st.isEmpty()) ans[st.pop()] = -1 ;
        return ans;
    }
    public int largestRectangleArea(int[] heights) {
        int n = heights.length , max = 0 ;
        int[] prevSm = PreviousSmaller(heights , n);
        int[] nextSm = nextSmaller(heights , n);
        for(int i = 0 ; i<n ; i++){
            int area = (nextSm[i]-prevSm[i]-1)*heights[i];
            if(area>max) max = area;
        }
        return max;
    }
}
