//problem- 2058(leetcode).


//1st Approach => low beats . (by using arraylist ).
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        int[] ans = {-1,-1};
        if(head==null || head.next ==null || head.next.next == null) return ans;
        ArrayList<Integer> arr = new ArrayList<>();
        ListNode temp =  head ;
        int prev =  temp.val , i  = 1;
        temp = temp.next;
        while(temp.next !=  null) {
            int pres = temp.val ;
            int nxt =  temp.next.val;
            if((pres<prev) && (pres<nxt)) arr.add(i);
            else if((pres>prev)  && (pres>nxt)) arr.add(i);
            i++;
            prev =  pres;
            temp =  temp.next ;
        }
        int n  = arr.size() , min =  Integer.MAX_VALUE;
        if(n<=1) return ans;
        ans[1] = arr.get(n-1) - arr.get(0);
        for(i =  0  ; i<(n-1) ; i++){
            int dif =  arr.get(i+1) - arr.get(i);
            if(dif<min) min = dif;
        }
        ans[0] =  min;
        return ans;
    }
}



//2nd Approach => without using extra memory .
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        int[] ans = {-1,-1};
        if(head==null || head.next ==null || head.next.next == null) return ans;
        ListNode temp =  head ;
        int prev =  temp.val , i  = 1 , n = 0 , minind = 0 , prevind = 0  ;
        temp = temp.next;
        ans[0] = Integer.MAX_VALUE;
        while(temp.next !=  null) {
            int pres = temp.val ;
            int nxt =  temp.next.val;
            if(((pres<prev) && (pres<nxt)) || ((pres>prev)  && (pres>nxt))){
                if(n==0){
                    minind = i;
                    prevind = i;
                    n++;
                }
                else{
                    int m = i - minind;
                    int l = i - prevind ;
                    if(ans[0]>l) ans[0] = l ;
                    if(m>ans[1]) ans[1] =  m;
                    n++;
                    prevind  = i;
                }
            }
            i++;prev =  pres;temp =  temp.next ;
        }
        if(n<=1) {ans[0] = -1;return ans;}
        return ans;
    }
}
